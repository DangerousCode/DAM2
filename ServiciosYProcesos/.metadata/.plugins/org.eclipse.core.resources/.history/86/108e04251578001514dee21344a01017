package semaforo;
import java.util.concurrent.Semaphore;

class Acumula{

public static int acumulador=0; //inicializa el acumulador a 0

}

class Sumador extends Thread {

private int cuenta;

private Semaphore semaforo;

//Constructor

Sumador (int hasta, int id, Semaphore semaforo){

this.cuenta=hasta;

this.semaforo

}

//Metodo incrementa el acumulador

public void sumar(){

Acumula.acumulador++;

Acumula.acumulador++;

}

public void run(){

for (int i=0; i<cuenta;i++){

try{

semaforo.acquire(); //Señal Wait del Semaforo. Disminuye en 1 

el semaforo

} catch (InterruptedException e){

e.printStackTrace();

}

sumar();

semaforo.release(); //Señal Signal del semaforo. Incrementa en 

1 el semaforo

}

}

}

=semaforo;

public class semaforoseccioncritica {

private static Sumador sumadores[];

private static Semaphore semaforoprincipal= new Semaphore(1);

public static void main (String[] args) {

int n_sum=4; //int n_sum

//Crea Array de procesos Sumadores

sumadores=new Sumador[n_sum];

//Inicia los Procesos del Array

for(int i=0;i<n_sum;i++){

sumadores[i]=new Sumador(10000,i,semaforoprincipal);

sumadores[i].start();

sumadores[i].start();

}

//Indica al Programa Principal espere a que todos los Procesos 

estén muertos

for (int i=0; i<n_sum;i++){

try{

sumadores[i].join();

} catch (InterruptedException e){

e.printStackTrace();

}

}

System.out.println ("Acumulador; "+ Acumula.acumulador);

}

}
